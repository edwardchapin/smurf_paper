#!/bin/tcsh
#+
# Reduce extended data
#

source $SMURF_DIR/smurf.csh > /dev/null
source $CONVERT_DIR/convert.csh > /dev/null
source $KAPPA_DIR/kappa.csh > /dev/null
source $HDSTOOLS_DIR/hdstools.csh > /dev/null

setenv ADAM_USER "adam_extended"

# map of extended stuff from early last year - M17
set obsdate = 20110531
set obsnum = 00011
set lambda = 's8?'
set allsub = (s8a s8b s8c s8d)
set basename = "$lambda"$obsdate\_$obsnum

set dataroot = /scuba2
#set msg = quiet
set msg = verbose
#set msg = normal

set onlyone = 0
#goto map_bright_extended
#goto map_default
#goto respmap
#goto fake
#goto jk


map_default:

echo "*** Reduce M17 map using default reduction ***"

makemap $dataroot/"$lambda"/$obsdate/$obsnum/"$basename"\_"*" \
    m17_default method=iterate \
    config='"^$STARLINK_DIR/share/smurf/dimmconfig.lis,itermap=0,chitol=<undef>,maptol=0.05,numiter=-900,shortmap=-1"' \
    msg_filter=$msg | tee m17_default.log

foreach iter ( 02 03 10 30 )
    ndf2fits m17_default.more.smurf.itermaps.ch00i0$iter m17_default_$iter.fits
end

if ( $onlyone == 1 ) goto finish





map_bright_extended:

echo "*** Reduce M17 map using bright_extended reduction ***"


makemap $dataroot/"$lambda"/$obsdate/$obsnum/"$basename"\_"*" \
    m17_bright_extended method=iterate \
    config='"^$STARLINK_DIR/share/smurf/dimmconfig_bright_extended.lis,itermap=1,numiter=-900,shortmap=-1"' \
    msg_filter=$msg | tee m17_bright_extended.log

makemap $dataroot/"$lambda"/$obsdate/$obsnum/"$basename"\_"*" \
    m17_bright_extended_2 method=iterate \
    config='"^$STARLINK_DIR/share/smurf/dimmconfig_bright_extended.lis,numiter=2"' \
    msg_filter=$msg

ndf2fits m17_bright_extended.sdf m17_bright_extended.fits
ndf2fits m17_bright_extended_2.sdf m17_bright_extended_2.fits

if ( $onlyone == 1 ) goto finish






respmap:

foreach sub ( $allsub )
    calcflat $dataroot/$sub/$obsdate/$obsnum/$sub$obsdate\_$obsnum\_0002 \
        flat_$sub resp=resp_$sub accept

    smurfcopy $dataroot/$sub/$obsdate/$obsnum/$sub$obsdate\_$obsnum\_0003 \
        slice_$sub 1

    hcopy resp_$sub.data_array slice_$sub.data_array
end

wcsmosaic slice_s8\* ref=! out=m17_resp_fplane method=nearest accept
wcsalign m17_resp_fplane out=m17_resp_fplane_align method=nearest \
    ref=m17_default accept
ndf2fits m17_resp_fplane_align \!m17_resp_fplane_align.fits

if ( $onlyone == 1 ) goto finish










fake:

echo "*** Adding fake cirrus data, and creating maps using each half ***"

# generate cirrus fakemap

idl makecirrus.pro
fits2ndf m17_fakemap.fits m17_fakemap

# stupid code to get each half of the data + fastflats

ls $dataroot/$lambda/$obsdate/$obsnum/*_0002.sdf > m17_half1.lis
ls $dataroot/$lambda/$obsdate/$obsnum/*_000[3-9].sdf >> m17_half1.lis
ls $dataroot/$lambda/$obsdate/$obsnum/*_00[12][0-9].sdf >> m17_half1.lis
ls $dataroot/$lambda/$obsdate/$obsnum/*_003[0-2].sdf >> m17_half1.lis
ls $dataroot/$lambda/$obsdate/$obsnum/*_0064.sdf >> m17_half1.lis

ls $dataroot/$lambda/$obsdate/$obsnum/*_0002.sdf > m17_half2.lis
ls $dataroot/$lambda/$obsdate/$obsnum/*_003[3-9].sdf >> m17_half2.lis
ls $dataroot/$lambda/$obsdate/$obsnum/*_00[4-6][0-9].sdf >> m17_half2.lis

# make sure the two half maps have the right dimensions using the
# full map as a reference, using 3 different filtering scales

set refmap = m17_default
ndftrace $refmap > /dev/null
set lbound = (`parget lbound ndftrace`)
set ubound = (`parget ubound ndftrace`)

foreach f ( 150 300 600 1200 )
#foreach f ( 600 )

    echo "^$STARLINK_DIR/share/smurf/dimmconfig.lis,chitol=<undef>,maptol=0.05,numiter=-900,itermap=1,fakemap=m17_fakemap,850.flt.filt_edge_largescale=$f" > conf_half_default.lis

    echo "^$STARLINK_DIR/share/smurf/dimmconfig_bright_extended.lis,itermap=1,numiter=-900,fakemap=m17_fakemap,850.flt.filt_edge_largescale=$f" > conf_half_bright_extended.lis

    foreach h ( 1 2 )

        makemap ^m17_half$h.lis m17_default_half$h\_$f method=iterate \
            config=^conf_half_default.lis \
            msg_filter=$msg ref=$refmap lbnd=\[$lbound[1],$lbound[2]\] \
            ubnd=\[$ubound[1],$ubound[2]\] | tee m17_default_half$h\_$f.log

        makemap ^m17_half$h.lis m17_bright_extended_half$h\_$f method=iterate \
            config=^conf_half_bright_extended.lis \
            msg_filter=$msg ref=$refmap lbnd=\[$lbound[1],$lbound[2]\] \
            ubnd=\[$ubound[1],$ubound[2]\] | tee m17_bright_extended_half$h\_$f.log
    end
end

if ( $onlyone == 1 ) goto finish












jk:

echo "*** Jackknife maps of default and bright_extended reductions ***"


# first obtain the region of the map where we will do power spectra in terms
# of NDF bounds (the text file gives 0-offset lower-left, lower-right,
# indices from the bottom-left corner, and length of the box on a side)

set xl = `cat cirrus_position | cut -d" " -f1`
set yl = `cat cirrus_position | cut -d" " -f2`
set n = `cat cirrus_position | cut -d" " -f3`

ndftrace m17_default > /dev/null
set lbnd_ref = (`parget lbound ndftrace`)

@ lbnd1 = $xl + $lbnd_ref[1] + 1
@ ubnd1 = $lbnd1 + $n - 1

@ lbnd2 = $yl + $lbnd_ref[2] + 1
@ ubnd2 = $lbnd2 + $n - 1


# the power spectrum of the input
cp m17_default.sdf temp.sdf
hcopy m17_fakemap.data_array temp.data_array
sc2mapfft temp\($lbnd1\:$ubnd1,$lbnd2\:$ubnd2\) pspec_m17_fakemap azavpspec
ndf2fits pspec_m17_fakemap \!pspec_m17_fakemap.fits

foreach f ( 150 300 600 1200 )
#foreach f ( 600 )

    foreach srcmap ( m17_default m17_bright_extended )
#    foreach srcmap ( m17_default )

        # take the sum and difference to estimate signal and noise

        set jk = $srcmap\_$f\_jk
        set sum = $srcmap\_$f\_sum

        echo making $jk...

        sub $srcmap\_half1_$f $srcmap\_half2_$f temp
        cdiv temp 2 $jk
        rm temp.sdf

        echo making $sum...

        wcsmosaic $srcmap\_half\*_$f out=$sum method=nearest variance accept

        ndf2fits $jk \!$jk.fits > /dev/null
        ndf2fits $sum \!$sum.fits > /dev/null

        # quality maps for the two halves

        ndf2fits $srcmap\_half1_$f \!$srcmap\_half1_$f\_qmask.fits comp=Q
        ndf2fits $srcmap\_half2_$f \!$srcmap\_half2_$f\_qmask.fits comp=Q

        # now make power spectra

        echo running sc2mapfft...

        sc2mapfft $jk\($lbnd1\:$ubnd1,$lbnd2\:$ubnd2\) pspec_$jk azavpspec
        ndf2fits pspec_$jk \!pspec_$jk.fits > /dev/null

        sc2mapfft $sum\($lbnd1\:$ubnd1,$lbnd2\:$ubnd2\) pspec_$sum azavpspec
        ndf2fits pspec_$sum \!pspec_$sum.fits > /dev/null

    end
end

if ( $onlyone == 1 ) goto finish




finish:

