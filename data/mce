#!/bin/tcsh
#+
# Check the effect of the MCE filtering on point sources

source $SMURF_DIR/smurf.csh > /dev/null
source $CONVERT_DIR/convert.csh > /dev/null
source $KAPPA_DIR/kappa.csh > /dev/null
source $HDSTOOLS_DIR/hdstools.csh > /dev/null

setenv ADAM_USER "adam_mce"

set dataroot = /scuba2
#set dataroot = /jcmtdata/raw/scuba2
#set dataroot = /home/echapin/scuba2/smurf_paper/data/raw

#set subarr = s8b
#set fwhm=14.5
#set pixsize=2

set subarr = s4a
set fwhm=7.5
set pixsize=1.0

# set these to something if adding signal to a calibrator map so that
# the fake source doesn't land on the calibrator (set to 0 otherwise)
set xpsf=0
set ypsf=0

#set msg = quiet
#set msg = normal
set msg = verbose
#set msg = debug


# 2011 obs recommended by Harriet. 900" pong.: new data for paper (no bright source)
#set obsdate = 20111112
#set obsnum = 00038
#set subfile = "000[12345]".sdf
#set xpsf=-20
#set ypsf=-20

# Nice short Uranus map, but slow speed - 150 arcsec/s
#set obsdate = 20111017
#set obsnum = 00026
#set subfile = "????".sdf
#set xpsf=-20
#set ypsf=-20

# Fast OMC1 map (600 arcsec/s) - garbage
#set obsdate = 20110204
#set obsnum = 00033
#set subfile = "????".sdf
#set subfile = "000[123456789]".sdf
#set xpsf=-100
#set ypsf=-100

# 300 arcsec/s Mars CV Daisy
#set obsdate = 20120512
#set obsnum = 00036
#set subfile = "????".sdf
#set xpsf=-20
#set ypsf=-20

# 1 deg^2 600 arcsec/s CLS map in UDS
#set obsdate = 20120124
#set obsnum = 00022
#set subfile = "????".sdf
##set subfile = "000[123456789]".sdf
#set xpsf=0
#set ypsf=0

# Fast DR21 (470 arcsec/s) - good for optimizing delay
set obsdate = 20110909
set obsnum = 00014
set subfile = "????".sdf
set subfile = "000[123456789]".sdf
set xpsf=-100
set ypsf=+100




# amount to delay signals when cleaning
set cleandel=0.0029

# amount to delay fake signals (normally -cleandel)
set fakedel=-0.0029





set basename = $subarr$obsdate\_$obsnum
set map = mce_$basename


set onlyone = 0
set justsim = 1 # minimal execution to check effect on input sorce

#goto map
#goto psf
#goto fake


# make the map

map:

echo
echo
echo --- making original map ---
echo
echo

makemap  $dataroot/$subarr/$obsdate/$obsnum/$basename\_"$subfile" \
    $map method=iterate \
    config='"^$STARLINK_DIR/share/smurf/dimmconfig_bright_extended.lis"' \
    pixsize=$pixsize msg_filter=$msg

if ( $justsim == 1 ) goto psf

if ( $onlyone == 1 ) goto finish

map_decon:

echo
echo
echo --- making original map, devonvolve MCE response, range of delays ---
echo
echo

rm delayfiles.txt

foreach del (-0.010 -0.008 -0.006 -0.004 -0.002 +0.000 +0.002 +0.004 +0.006 +0.008 +0.010)

    echo
    echo "Delay of $del seconds"
    echo

    set fname = `echo $del | tr '.' '_'`

    makemap  $dataroot/$subarr/$obsdate/$obsnum/$basename\_"$subfile" \
        $map\_decon$fname method=iterate \
        config='"^$STARLINK_DIR/share/smurf/dimmconfig_bright_extended.lis,deconvmce=1,delay='$del'"' \
        pixsize=$pixsize msg_filter=$msg


    ndf2fits $map\_decon$fname \!$map\_decon$fname.fits

    echo $map\_decon$fname.fits >> delayfiles.txt
end

if ( $onlyone == 1 ) goto finish

# create a Gaussian of the correct size

psf:

echo
echo
echo --- Create synthetic source ---
echo
echo

ndftrace $map > /dev/null
set mapdim = (`parget dims ndftrace`)

creframe like=$map mode=fl mean=0 out=temp
chpix in=temp out=temp2 section=\"$xpsf,$ypsf\" newval=1
set npix = `calc exp="'pa/pb'" pa=$fwhm pb=$pixsize`
gausmooth in=temp2 out=temp fwhm=$npix box=\"$mapdim[1],$mapdim[2]\"
stats temp > /dev/null
set max = `parget maximum stats`
cdiv temp $max temp2

stats $map comp=error > /dev/null
set minerr = `parget minimum stats`
set scale = `calc exp="'pa*pb'" pa=$minerr pb=1000`
cmult temp2 $scale psf

ndftrace $map > /dev/null
set lbound = (`parget lbound ndftrace`)
set ubound = (`parget ubound ndftrace`)

ndf2fits psf \!psf.fits > /dev/null

if ( $justsim == 1 ) goto fake_mce

if ( $onlyone == 1 ) goto finish


# make the map with source added

fake:

echo
echo
echo --- map with fake source, no MCE response applied, no delay ---
echo
echo

ndftrace $map > /dev/null
set lbound = (`parget lbound ndftrace`)
set ubound = (`parget ubound ndftrace`)

makemap $dataroot/$subarr/$obsdate/$obsnum/$basename\_"$subfile" \
    $map\_fake method=iterate \
    config='"^$STARLINK_DIR/share/smurf/dimmconfig_bright_extended.lis,fakemap=psf"' \
    pixsize=$pixsize msg_filter=$msg ref=$map lbnd=\[$lbound[1],$lbound[2]\] \
    ubnd=\[$ubound[1],$ubound[2]\]

if ( $onlyone == 1 ) goto finish

# make the map with source added and apply MCE filtering

fake_mce:

echo
echo
echo --- map with fake source, applying MCE response, delayed ---
echo
echo

ndftrace $map > /dev/null
set lbound = (`parget lbound ndftrace`)
set ubound = (`parget ubound ndftrace`)

makemap $dataroot/$subarr/$obsdate/$obsnum/$basename\_"$subfile" \
    $map\_fake_mce_del method=iterate \
    config='"^$STARLINK_DIR/share/smurf/dimmconfig_bright_extended.lis,fakedelay='$fakedel',fakemap=psf,fakemce=1"' \
    pixsize=$pixsize msg_filter=$msg ref=$map lbnd=\[$lbound[1],$lbound[2]\] \
    ubnd=\[$ubound[1],$ubound[2]\]

if ( $onlyone == 1 ) goto finish

# make the map with source added and apply MCE filtering, and finally deconvolve

fake_mce_decon:

echo
echo
echo --- map with fake source, applying MCE response, delayed, corrected ---
echo
echo

ndftrace $map > /dev/null
set lbound = (`parget lbound ndftrace`)
set ubound = (`parget ubound ndftrace`)

makemap $dataroot/$subarr/$obsdate/$obsnum/$basename\_"$subfile" \
    $map\_fake_mce_del_decon method=iterate \
    config='"^$STARLINK_DIR/share/smurf/dimmconfig_bright_extended.lis,delay='$cleandel',fakemap=psf,fakedelay='$fakedel',fakemce=1,deconvmce=1"' \
    pixsize=$pixsize msg_filter=$msg ref=$map lbnd=\[$lbound[1],$lbound[2]\] \
    ubnd=\[$ubound[1],$ubound[2]\]

if ( $onlyone == 1 ) goto finish



finish:
